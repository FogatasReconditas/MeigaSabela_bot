const config = require('../config');
const galicianPhrases = require('../galicianPhrases');

class TelegramService {
    constructor(bot) {
        this.bot = bot;
    }

    /**
     * Check if user is member of the Fogatas RecÃ³nditas channel
     */
    async checkChannelMembership(userId) {
        try {
            const chatMember = await this.bot.getChatMember(config.CHANNEL_CHAT_ID, userId);
            
            // Member status can be: 'creator', 'administrator', 'member', 'restricted', 'left', 'kicked'
            return ['creator', 'administrator', 'member'].includes(chatMember.status);
        } catch (error) {
            console.error('Error verificando membresÃ­a:', error);
            
            // If we can't verify (user privacy settings, etc.), assume they're not a member
            // This is safer than assuming they are a member
            return false;
        }
    }

    /**
     * Send hostile response to non-members with join button
     */
    async sendNonMemberResponse(chatId) {
        const hostileMessages = [
            "Â¿E ti quen es? Non te coÃ±ezo de nada. Se non estÃ¡s no noso cÃ­rculo, non me fagas perder o tempo con parvadas.",
            "Â¡Mal raio te parta! Â¿Que fas aquÃ­ se non es do noso aquelarre? Ãšnete primeiro antes de molestarme.",
            "Â¡Neno/a! Non me vengas con historias se non estÃ¡s na nosa xente. DÃ©ixame en paz ou Ãºnete ao grupo.",
            "SerÃ¡che cousa de atrevidos... Non che vou contar nada se non formas parte do noso cÃ­rculo. NO TE VOY A CONTAR NADA hasta que no te unes al viaje."
        ];

        const randomMessage = hostileMessages[Math.floor(Math.random() * hostileMessages.length)];
        const fullMessage = `${randomMessage}\n\nÃšnete al canal de Fogatas RecÃ³nditas o DÃ‰IXAME EN PAZ`;

        const keyboard = {
            inline_keyboard: [[
                {
                    text: "ðŸ”® Quiero unirme al canal",
                    url: config.CHANNEL_INVITE_LINK
                }
            ]]
        };

        await this.bot.sendMessage(chatId, fullMessage, {
            reply_markup: keyboard
        });
    }

    /**
     * Send response with podcast promotion button
     */
    async sendResponseWithButton(chatId, text) {
        const keyboard = {
            inline_keyboard: [[
                {
                    text: "ðŸŽ§ Escucha Fogatas RecÃ³nditas",
                    url: config.PODCAST_LINKTREE
                }
            ]]
        };

        await this.bot.sendMessage(chatId, text, {
            reply_markup: keyboard,
            parse_mode: 'Markdown'
        });
    }

    /**
     * Check if message is asking about the podcast
     */
    isPodcastQuery(messageText) {
        if (!messageText) return false;
        
        const podcastKeywords = [
            'podcast', 'episodio', 'fogatas', 'recÃ³nditas', 'federico', 'sergio',
            'anfitriones', 'conductores', 'programa', 'episodios'
        ];

        const text = messageText.toLowerCase();
        return podcastKeywords.some(keyword => text.includes(keyword));
    }

    /**
     * Check if message is asking about legends or where to listen
     */
    isLegendsQuery(messageText) {
        if (!messageText) return false;
        
        const legendsKeywords = [
            'leyenda', 'leyendas', 'historia', 'historias', 'mitos', 'galicia',
            'gallega', 'gallegas', 'escuchar', 'dÃ³nde', 'donde', 'plataforma'
        ];

        const text = messageText.toLowerCase();
        return legendsKeywords.some(keyword => text.includes(keyword));
    }
}

module.exports = TelegramService;
